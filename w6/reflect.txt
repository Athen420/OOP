In Workshop 6, I learned how to manage polymorphic objects using the STL vector container. I understood the importance of deallocating dynamically allocated memory in the vector to avoid memory leaks.

When building objects from an input file, there can be different issues like encountering an unknown vehicle type or invalid data. The loadData() function used the throw keyword to signal exceptions for such cases. The function throws an exception when it encounters a problem, and the calling code catches and handles it appropriately.

In this workshop, we used std::list<sdds::Vehicle*> and std::vector<sdds::Vehicle*> to store pointers to vehicles. This was the right choice to prevent object slicing, where derived class information would be lost. Using pointers allows us to handle polymorphic objects correctly.

Though I faced some challenges with exceptions and memory deallocation, I overcame them by carefully reviewing the course material and practicing. This workshop provided hands-on experience with STL containers and polymorphism, which will be useful in future projects.




